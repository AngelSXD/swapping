<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.sxd</groupId>
	<artifactId>swapping</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>swapping</name>
	<description>Swapping for Spring Boot</description>


	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.9.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<azure.version>2.0.1</azure.version>
		<java.version>1.8</java.version>
		<spring-cloud-gcp.version>1.0.0.M3</spring-cloud-gcp.version>
		<spring-cloud-services.version>2.0.0.M1</spring-cloud-services.version>
		<spring-cloud-task.version>2.0.0.RC1</spring-cloud-task.version>
		<spring-cloud.version>Finchley.M9</spring-cloud.version>
		<spring-statemachine.version>2.0.1.RELEASE</spring-statemachine.version>
		<vaadin.version>8.3.1</vaadin.version>
		<easyexcel.version>2.2.7</easyexcel.version>
		<poi.version>3.17</poi.version>
		<jedis.version>2.9.0</jedis.version>
		<xstream.version>1.4.18</xstream.version>
		<aspectjweaver.version>1.8.8</aspectjweaver.version>
		<swagger.version>2.8.0</swagger.version>
		<fastjson.version>1.2.62</fastjson.version>
		<hutool.version>3.1.0</hutool.version>
		<javax.mail.version>1.4.5</javax.mail.version>
		<org.mapstruct.version>1.2.0.CR1</org.mapstruct.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-activemq</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<!--	简单理解，aspectjweaver支持切入点表达式等等  aspectjrt支持aop相关注解等等	-->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectjweaver.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>




		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<!--web 支持-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- 事务 支持  -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
		</dependency>
		<!--jsp页面使用jstl标签-->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		<!--用于编译jsp-->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>de.flapdoodle.embed</groupId>
			<artifactId>de.flapdoodle.embed.mongo</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.batch</groupId>
			<artifactId>spring-batch-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-mockmvc</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>



		<!-- elasticsearch   start-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
		</dependency>
		<!-- logback 推送日志文件到logstash -->
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
			<version>5.1</version>
		</dependency>
		<!-- elasticsearch   end-->



		<!--mybatis-->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.2</version>
		</dependency>
		<!--数据库连接池  https://mvnrepository.com/artifact/com.alibaba/druid  -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.1.9</version>
		</dependency>
		<!--log4j  https://mvnrepository.com/artifact/log4j/log4j -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<!--mybatis分页插件  https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter-->
		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper-spring-boot-starter</artifactId>
			<version>1.2.5</version>
		</dependency>
		<!--swagger 2	API文档	 start-->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${swagger.version}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${swagger.version}</version>
		</dependency>
		<!--swagger 2	API文档	 end-->

		<!-- redis start-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<!--spring2.0集成redis所需common-pool2-->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
			<version>2.4.2</version>
		</dependency>
		<!-- 使用redis的LUA脚本 需要序列化操作的jar-->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<!-- redis end-->


		<!--	集合工具包  start	-->
		<!--commons-lang3 工具类  https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.1</version>
		</dependency>
		<!--	集合工具包  end	-->


		<!--	JSON工具包1  start	-->
		<!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson.version}</version>
		</dependency>
		<!--	JSON工具包1  end	-->

		<!--工具包2 start-->
		<dependency>
			<groupId>com.xiaoleilu</groupId>
			<artifactId>hutool-all</artifactId>
			<version>${hutool.version}</version>
		</dependency>
		<!--工具包2  end-->

		<!--	JSON工具包2  start	-->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.6.2</version>
		</dependency>
		<!--	JSON工具包2  end	-->

		<!--	google  开源 guava  start	-->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>23.0</version>
		</dependency>
		<!--	google  开源 guava  end	-->


		<!--	邮件开发  start	-->
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>${javax.mail.version}</version>
		</dependency>
		<!--	邮件开发  end	-->


		<!--mapStruct依赖  start-->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-jdk8</artifactId>
			<version>${org.mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>${org.mapstruct.version}</version>
		</dependency>
		<!--mapStruct依赖  end-->


		<!-- 实现排列组合		-->
		<dependency>
			<groupId>com.github.dpaukov</groupId>
			<artifactId>combinatoricslib3</artifactId>
			<version>3.3.0</version>
		</dependency>

		<!-- 阿里巴巴easyexcel start-->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>easyexcel</artifactId>
			<version>${easyexcel.version}</version>
			<exclusions>
				<exclusion>
					<groupId>cglib</groupId>
					<artifactId>cglib</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<!-- 阿里巴巴easyexcel end-->


		<!--        jedis  Start-->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>${jedis.version}</version>
		</dependency>
		<!--        jedis  End-->

		<!--	XML 操作类库	 start-->
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>${xstream.version}</version>
		</dependency>
		<!--	XML 操作类库	 end-->



		<!--	java内发送http请求	start-->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
		</dependency>
		<!--	java内发送http请求	end-->
	</dependencies>


	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-task-dependencies</artifactId>
				<version>${spring-cloud-task.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.microsoft.azure</groupId>
				<artifactId>azure-spring-boot-bom</artifactId>
				<version>${azure.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>io.pivotal.spring.cloud</groupId>
				<artifactId>spring-cloud-services-dependencies</artifactId>
				<version>${spring-cloud-services.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.vaadin</groupId>
				<artifactId>vaadin-bom</artifactId>
				<version>${vaadin.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-gcp-dependencies</artifactId>
				<version>${spring-cloud-gcp.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.statemachine</groupId>
				<artifactId>spring-statemachine-bom</artifactId>
				<version>${spring-statemachine.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!-- build标签描述了如何来编译及打包项目   参考地址：https://blog.csdn.net/u010010606/article/details/79727438	-->
	<build>
		<!--	而具体的编译和打包工作是通过build中配置的 plugin 来完成  	-->
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<version>2.6</version>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<encoding>UTF-8</encoding>
					<nonFilteredFileExtensions>
						<nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
					</nonFilteredFileExtensions>
				</configuration>
			</plugin>
		</plugins>
		<!--	build过程中涉及的资源文件  用于包含 或 排除某些资源文件	-->
		<resources>
			<resource>
				<!--	资源文件的路径，默认位于${basedir}/src/main/resources/目录下			-->
				<directory>src/main/resources</directory>
				<!--
					官网说明地址：https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
					filtering作用即 设置为true代表打通pom.xml和 <directory>指定路径下的文件之间的通道。（该目录下一般都是配置文件yml或properties，也可以是txt等其他）
					使得<directory>指定路径下的配置文件中以${}表达式定义的变量，可以从pom.xml文件中获取到对应标签变量去完成文本替换。
					例如：
					pom.xml文件中定义了标签<name>张三</name>
					配置文件中定义 spring.myname=${name}
					则maven编译完成后，配置文件中的 spring.myname=张三


					或者替换<directory>指定路径下的配置文件中以@sxdProfileActive@表达式定义的变量
					例如：
					pom.xml文件中定义了
					<profile>
						<id>dev</id>
						<properties>
							<sxdProfileActive>dev</sxdProfileActive>
						</properties>
					</profile>

					application.properties文件中定义的spring.profiles.active=@sxdProfileActive@
					则maven编译完成后，配置文件中的spring.profiles.active=dev

					所以，多环境profile切换配置文件情况下，该标签必须设置为true,否则会导致spring.profiles.active=@sxdProfileActive@不能完成值替换，
					从而导致applocation-{profile}.properties匹配不到对应的profile的配置文件，从而默认加载application.properties主配置文件。
					而主配置文件中毛配置都没有，最终导致 java代码中的@Bean/@Configuration 中用到配置文件中的配置才能完成初始化的动作 就会失败。

				-->
				<filtering>true</filtering>
				<!--	一组文件名的匹配模式，被匹配的资源文件将被构建过程忽略。同时被includes和excludes匹配的资源文件，将被忽略。			-->
				<excludes>
					<exclude>**/*.ttf</exclude>
					<exclude>**/*.woff</exclude>
				</excludes>
			</resource>
		</resources>
	</build>



	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>


	<!-- 多环境配置  start	-->
	<profiles>
		<!--	local一般作为开发者开发的环境	-->
		<profile>
			<id>sxdlocal</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<sxdProfileActive>local</sxdProfileActive>
			</properties>
		</profile>
		<!--	dev一般作为开发者稳定的自测环境	-->
		<profile>
			<id>dev</id>
			<properties>
				<sxdProfileActive>dev</sxdProfileActive>
			</properties>
		</profile>
		<!--	uat环境一般作为业务验收环境	-->
		<profile>
			<id>uat</id>
			<properties>
				<sxdProfileActive>uat</sxdProfileActive>
			</properties>
		</profile>
		<!--	test环境作为测试环境	-->
		<profile>
			<id>test</id>
			<properties>
				<sxdProfileActive>test</sxdProfileActive>
			</properties>
		</profile>
		<!--	online环境作为生产环境	-->
		<profile>
			<id>online</id>
			<properties>
				<sxdProfileActive>online</sxdProfileActive>
			</properties>
		</profile>
		<!--	backUp作为 2021.07.23分环境之前的一个备份稳定配置	-->
		<profile>
			<id>myBackUp</id>
			<properties>
				<sxdProfileActive>backup</sxdProfileActive>
			</properties>
		</profile>
	</profiles>
	<!-- 多环境配置  end	-->

</project>
